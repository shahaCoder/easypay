// src/bot.ts
import { Telegraf, Markup } from "telegraf";
import { checkEzpassNJ, NjItem } from "./providers/ezpassnj";
import { calcPlan1, calcPlan2, createTotalCheckout } from "./payments";
import {
  ensureSchema,
  insertCreatingOrGetExisting,
  setPending,
  listByChat,
  findActive,
  PlanLabel,
} from "./db";

/* ================== i18n ================== */
type Lang = "ru" | "uz";

const t = {
  ru: {
    choose_lang_title: "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!",
    choose_lang_sub: "Botdan foydalanish uchun tilni tanlang!",
    start_prompt:
      "–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ ‚Äî –ø—Ä–æ–≤–µ—Ä—é –≤—Å–µ –∏–Ω–≤–æ–π—Å—ã –∏ –≤—ã–≤–µ–¥—É –∏—Ç–æ–≥.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
    ask_plate: "–í–≤–µ–¥–∏ *Plate number* (–∫–∞–∫ –Ω–∞ –Ω–æ–º–µ—Ä–µ –∞–≤—Ç–æ):",
    ask_invoice: "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ *Invoice/Violation number* (—Å –ø–∏—Å—å–º–∞):",
    plate_invalid:
      "–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ Plate. –ü—Ä–∏–º–µ—Ä: *RLRYY99* –∏–ª–∏ *ABC-1234*.",
    invoice_invalid:
      "–ù–æ–º–µ—Ä –∏–Ω–≤–æ–π—Å–∞/–Ω–∞—Ä—É—à–µ–Ω–∏—è –≤—ã–≥–ª—è–¥–∏—Ç —Å—Ç—Ä–∞–Ω–Ω–æ. –ü—Ä–∏–º–µ—Ä: *T062549136462*.",
    checking: "–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ –±–∞–∑–µ NJ E-ZPass‚Ä¶ ‚è≥",
    not_found: "–ù–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ü§∑‚Äç‚ôÇÔ∏è\n\n",
    found_items_title: "ü•≥ –ù–∞–π–¥–µ–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:",
    start_hint: "–ù–∞–∂–º–∏ ¬´–û–ø–ª–∞—Ç–∏—Ç—å E-ZPass¬ª, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ.",
    start_main: "–û–ø–ª–∞—Ç–∏—Ç—å E-ZPass üí≥",
    help: "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ üë®‚Äçüíª",
    history: "–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫ üìö",
    hist_none: "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.",
    plan1_btn: "1) –ü—Ä—è–º–∞—è –æ–ø–ª–∞—Ç–∞",
    plan2_btn: "2) –°–æ —Å–∫–∏–¥–∫–æ–π",
    pay_one_btn: "3) –û–ø–ª–∞—Ç–∏—Ç—å –æ–¥–∏–Ω –∏–Ω–≤–æ–π—Å",
    ask_ezpass_acc:
      "–í–≤–µ–¥–∏—Ç–µ *E-ZPass account number* (–Ω–∞–ø—Ä–∏–º–µ—Ä, *01900300545*). –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π.",
    ezpass_acc_invalid:
      "–ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ E-ZPass –≤—ã–≥–ª—è–¥–∏—Ç —Å—Ç—Ä–∞–Ω–Ω–æ. –í–≤–µ–¥–∏—Ç–µ *11* —Ü–∏—Ñ—Ä. –ü—Ä–∏–º–µ—Ä: *01900300545*.",

    choose_one_title: "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
    back_btn: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
    pay_one_p1_btn: "–ü—Ä—è–º–∞—è –æ–ø–ª–∞—Ç–∞ (–∑–∞ —ç—Ç–æ—Ç –∏–Ω–≤–æ–π—Å)",
    pay_one_p2_btn: "–°–æ —Å–∫–∏–¥–∫–æ–π (–∑–∞ —ç—Ç–æ—Ç –∏–Ω–≤–æ–π—Å)",

    dup_creating_title: "–ó–∞—è–≤–∫–∞ –ø–æ —ç—Ç–∏–º –¥–∞–Ω–Ω—ã–º —É–∂–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è‚Ä¶ ‚è≥",
    dup_creating_hint:
      "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—É—é.",
    dup_pending_title: "–ó–∞—è–≤–∫–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ —ç—Ç–∏–º –¥–∞–Ω–Ω—ã–º ‚úÖ",
    dup_pending_hint:
      "–ï—Å–ª–∏ –≤—ã –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø–ª–∞—Ç—ë–∂:",
    dup_done_title: "–ó–∞—è–≤–∫–∞ –ø–æ —ç—Ç–∏–º –¥–∞–Ω–Ω—ã–º —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞ ‚úÖ",
    dup_done_hint:
      "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å ‚Äî –∏–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä—É–≥–æ–π –∏–Ω–≤–æ–π—Å) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
    lang_btn: "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",

    pay_now: (amount: number) =>
      `–û—Ç–∫—Ä–æ–π—Ç–µ Stripe –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ *$${amount.toFixed(2)}*`,
    no_charges: "–ü–æ –±–∞–∑–µ –Ω–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π.",
    p2_min70: "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ‚Äî $70.",
  },
  uz: {
    start_prompt:
      "Ma‚Äôlumotlarni yuboring ‚Äî hisoblarni tekshiraman va umumiy summani chiqaraman.\nQuyidagi tugmani bosing üëá",
    ask_plate: "*Plate number* (avto raqami) ni kiriting:",
    ask_invoice: "Endi xatdagi *Invoice/Violation number* ni kiriting:",
    plate_invalid:
      "Plate noto‚Äòg‚Äòri ko‚Äòrinadi. Namuna: *RLRYY99* yoki *ABC-1234*.",
    invoice_invalid:
      "Invoice/Violation raqami noto‚Äòg‚Äòri. Namuna: *T062549136462*.",
    checking: "NJ E-ZPass bazasida tekshiryapman‚Ä¶ ‚è≥",
    not_found: "Hisoblar topilmadi. ü§∑‚Äç‚ôÇÔ∏è\n\n",
    found_items_title: "ü•≥ Topilgan hisoblar:",
    start_hint:
      "Ma‚Äôlumot kiritish uchun ¬´E-ZPass to‚Äòlash¬ª tugmasini bosing.",
    start_main: "E-ZPass to‚Äòlash üí≥",
    help: "Yordam üë®‚Äçüíª",
    history: "Buyurtmalar tarixi üìö",
    hist_none: "Hali buyurtmalar yo‚Äòq.",
    plan1_btn: "1) To‚Äòg‚Äòridan-to‚Äòg‚Äòri to‚Äòlov",
    plan2_btn: "2) Chegirma bilan",
    pay_one_btn: "3) Bitta invoysni to‚Äòlash",
    ask_ezpass_acc:
      "*E-ZPass account number* ni kiriting (masalan, *01900300545*). Chegirma varianti uchun majburiy.",
    ezpass_acc_invalid:
      "E-ZPass hisob raqami noto‚Äòg‚Äòri. Iltimos, *11* raqam kiriting. Masalan: *01900300545*.",

    choose_one_title: "To‚Äòlov uchun invoysni tanlang:",
    back_btn: "‚¨ÖÔ∏è Orqaga",
    pay_one_p1_btn: "To‚Äòg‚Äòridan-to‚Äòg‚Äòri (shu invoys)",
    pay_one_p2_btn: "Chegirma bilan (shu invoys)",

    dup_creating_title:
      "Ushbu ma‚Äôlumotlar bo‚Äòyicha ariza yaratilmoqda‚Ä¶ ‚è≥",
    dup_creating_hint:
      "Bir necha soniya kuting. Agar havola allaqachon bo‚Äòlsa ‚Äî yangisini yaratmasdan undan foydalaning.",
    dup_pending_title:
      "Ushbu ma‚Äôlumotlar bo‚Äòyicha ariza allaqachon yaratilgan ‚úÖ",
    dup_pending_hint:
      "Hali to‚Äòlovni yakunlamagan bo‚Äòlsangiz, quyidagi havola orqali davom eting:",
    dup_done_title:
      "Ushbu ma‚Äôlumotlar bo‚Äòyicha to‚Äòlov allaqachon bajarilgan ‚úÖ",
    dup_done_hint:
      "Qayta to‚Äòlash uchun ma‚Äôlumotlarni o‚Äòzgartiring (masalan, boshqa invoice) yoki yordamga yozing.",
    lang_btn: "üåê Tilni almashtirish",

    pay_now: (amount: number) =>
      `Stripe‚Äôni oching va *$${amount.toFixed(2)}* miqdorni to‚Äòlovini yakunlang`,
    no_charges: "Bazaga ko‚Äòra to‚Äòlov yo‚Äòq.",
    p2_min70: "Ikkinchi variant uchun minimal summa ‚Äî $70.",
  },
};

type Step =
  | "lang"
  | "idle"
  | "await_plate"
  | "await_invoice"
  | "await_ezpass_account";

type PayScope = "total" | "single";

type Session = {
  step: Step;
  plate?: string;
  invoice?: string;
  ezpassAccount?: string;
  lastTotal?: number;

  items?: NjItem[];
  singleIndex?: number | null;
  scope?: PayScope;

  lang: Lang;
};

const sessions = new Map<number, Session>();
const ses = (id: number): Session => {
  if (!sessions.has(id)) sessions.set(id, { step: "lang", lang: "ru" });
  return sessions.get(id)!;
};

const kbLang = Markup.inlineKeyboard([
  [
    Markup.button.callback("–†—É—Å—Å–∫–∏–π üá∑üá∫", "lang_ru"),
    Markup.button.callback("O‚Äòzbekcha üá∫üáø", "lang_uz"),
  ],
]);

const kbStart = (lang: Lang) =>
  Markup.inlineKeyboard([
    [Markup.button.callback(lang === "ru" ? t.ru.start_main : t.uz.start_main, "start_flow")],
    [Markup.button.callback(lang === "ru" ? t.ru.history : t.uz.history, "history")],
    [Markup.button.callback(lang === "ru" ? t.ru.help : t.uz.help, "help")],
    [Markup.button.callback(lang === "ru" ? t.ru.lang_btn : t.uz.lang_btn, "choose_lang")],
  ]);

/* ============== —É—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ============== */
const planTitle = (lang: Lang, plan: PlanLabel) =>
  lang === "ru"
    ? plan === "plan2_discount"
      ? "2 (—Å–æ —Å–∫–∏–¥–∫–æ–π)"
      : "1 (–ø—Ä—è–º–∞—è)"
    : plan === "plan2_discount"
    ? "2 (chegirma bilan)"
    : "1 (to‚Äòg‚Äòridan-to‚Äòg‚Äòri)";

const money = (x: number) => `$${Number(x || 0).toFixed(2)}`;
const middleEllipsis = (s: string, left = 6, right = 4) =>
  s.length <= left + right + 1 ? s : `${s.slice(0, left)}‚Ä¶${s.slice(-right)}`;
const invBtnLabel = (it: NjItem) =>
  `üíµ ${money(it.amountDue)} ¬∑ #${middleEllipsis(it.noticeNumber || "‚Äî")}`;

/* ============== —Ç–µ–∫—Å—Ç —Ä–∞—Å—á—ë—Ç–æ–≤ ============== */
function buildPlansText(
  lang: Lang,
  T: number,
  p1: { service: number; fees: number; total: number },
  p2: { allowed: boolean; discounted: number; service: number; serviceReduced?: boolean; fees: number; total: number }
) {
  if (T <= 0) {
    return lang === "ru"
      ? "–ü–æ –±–∞–∑–µ –Ω–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π ‚Äî –ø–ª–∞—Ç–∏—Ç—å –Ω–µ—á–µ–≥–æ."
      : "Bazaga ko‚Äòra hech qanday to‚Äòlov yo‚Äòq ‚Äî to‚Äòlash shart emas.";
  }

  if (lang === "uz") {
    let s = "";
    s += `Bazadagi jami: *$${T.toFixed(2)}*\n\n`;
    s += `Bizda 2 xil xizmat mavjud.\n\n`;
    s += `*1-variant ‚Äî chegirmasiz, to‚Äòg‚Äòridan-to‚Äòg‚Äòri to‚Äòlov!*\n`;
    s += `Toll to‚Äòlovi ‚Äî *$${T.toFixed(2)}*\n`;
    s += `Xizmat haqi ‚Äî *$${p1.service.toFixed(2)}*\n`;
    s += `Boshqa xarajatlar ‚Äî *$${p1.fees.toFixed(2)}*\n`;
    s += `Jami ‚Äî *$${p1.total.toFixed(2)}*\n\n`;
    s += `‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è *MUHIM:* 1-variantda bajarilish muddati *6 ish soatigacha*. ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n\n`;

    if (p2.allowed) {
      s += `*2-variant ‚Äî minimal 10% chegirma beriladi.* (Chegirma kattaroq bo‚Äòlishi mumkin; farq kartangizga qaytariladi.)\n`;
      s += `Toll to‚Äòlovi ‚Äî *$${p2.discounted.toFixed(2)}*\n`;
      s += `Xizmat haqi ‚Äî *$${p2.service.toFixed(2)}*${p2.serviceReduced ? " _(minusga chiqib ketmasligingiz uchun kamaytirildi)_" : ""}\n`;
      s += `Boshqa xarajatlar ‚Äî *$${p2.fees.toFixed(2)}*\n`;
      s += `Jami ‚Äî *$${p2.total.toFixed(2)}* (summa yanada kam bo‚Äòlishi mumkin ‚ò∫Ô∏è)\n\n`;
      s += `‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è *MUHIM:* 2-variantda bajarilish muddati *2 ish kunigacha*. ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n\n`;
    } else {
      s += `*2-variant* hozircha mavjud emas: tanlash uchun minimal summa ‚Äî *$70*.\n\n`;
    }
    s += `Quyida xizmatni tanlang üëáüèª`;
    return s;
  }

  let s = "";
  s += `–ò—Ç–æ–≥–æ –ø–æ –±–∞–∑–µ –Ω–∞–π–¥–µ–Ω–æ: *$${T.toFixed(2)}*\n\n`;
  s += `–£ –Ω–∞—Å –∏–º–µ—é—Ç—Å—è 2 –≤–∏–¥–∞ —É—Å–ª—É–≥.\n\n`;
  s += `*1-–π –≤–∏–¥ - –±–µ–∑ —Å–∫–∏–¥–æ–∫, –æ–ø–ª–∞—Ç–∞ –Ω–∞ –ø—Ä—è–º—É—é!*\n`;
  s += `–ü–ª–∞—Ç–∞ –∑–∞ —Ç–æ–ª–ª - *$${T.toFixed(2)}*\n`;
  s += `–ü–ª–∞—Ç–∞ –∑–∞ —Å–µ—Ä–≤–∏—Å - *$${p1.service.toFixed(2)}*\n`;
  s += `–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã - *$${p1.fees.toFixed(2)}*\n`;
  s += `–¢–æ—Ç–∞–ª - *$${p1.total.toFixed(2)}*\n\n`;
  s += `‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –í–ê–ñ–ù–û –ü–†–ò –í–´–ë–û–†–ï 1-–ì–û –í–ê–†–ò–ê–ù–¢–ê –°–†–û–ö –î–û–°–¢–ê–í–ö–ò –î–û *6 –†–ê–ë–û–ß–ò–• –ß–ê–°–û–í* ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n\n`;

  if (p2.allowed) {
    s += `*2-–æ–π –≤–∏–¥ - –≤—ã–¥–∞–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ 10%.* (—Å–∫–∏–¥–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ, –æ—Å—Ç–∞—Ç–æ–∫ –º—ã –≤–µ—Ä–Ω—ë–º –Ω–∞ –≤–∞—à—É –∫–∞—Ä—Ç—É.)\n`;
    s += `–ü–ª–∞—Ç–∞ –∑–∞ —Ç–æ–ª–ª - *$${p2.discounted.toFixed(2)}*\n`;
    s += `–ü–ª–∞—Ç–∞ –∑–∞ —Å–µ—Ä–≤–∏—Å - *$${p2.service.toFixed(2)}*${p2.serviceReduced ? " _(—Å–Ω–∏–∂–µ–Ω–æ, —á—Ç–æ–±—ã –≤—ã –Ω–µ —É—à–ª–∏ –≤ –º–∏–Ω—É—Å)_" : ""}\n`;
    s += `–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã - *$${p2.fees.toFixed(2)}*\n`;
    s += `–¢–æ—Ç–∞–ª - *$${p2.total.toFixed(2)}* (—Å—É–º–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ ‚ò∫Ô∏è)\n\n`;
    s += `‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –í–ê–ñ–ù–û –ü–†–ò –í–´–ë–û–†–ï 2-–ì–û –í–ê–†–ò–ê–ù–¢–ê –°–†–û–ö –î–û–°–¢–ê–í–ö–ò –î–û *2-–• –†–ê–ë–û–ß–ò–• –î–ù–ï–ô* ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n\n`;
  } else {
    s += `*2-–æ–π –≤–∏–¥* –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø—É–Ω–∫—Ç–∞ ‚Äî *$70*.\n\n`;
  }
  s += `–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –Ω–∏–∂–µ üëáüèª`;
  return s;
}

/* ============== helpers ============== */
async function findDuplicateAnyPlan(chatId: number, plate: string, invoice: string) {
  const a = await findActive(String(chatId), "plan2_discount" as PlanLabel, plate, invoice);
  if (a) return a;
  const b = await findActive(String(chatId), "plan1_direct" as PlanLabel, plate, invoice);
  return b || null;
}

/* –†–µ–Ω–¥–µ—Ä ¬´–ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é¬ª –∏–∑ –∫—ç—à–∞ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ NJ) */
async function sendPlansMenu(ctx: any) {
  const S = ses(ctx.chat!.id);
  const lang = S.lang;
  const lines: string[] = [];
  if (S.items?.length) {
    lines.push(lang === "ru" ? t.ru.found_items_title : t.uz.found_items_title);
    for (const it of S.items) {
      const n = it.noticeNumber ? `#${it.noticeNumber}` : "‚Äî";
      lines.push(`‚Ä¢ ${n} ‚Äî $${it.amountDue.toFixed(2)}`);
    }
  }
  const T = +(S.lastTotal || 0).toFixed(2);
  const p1 = calcPlan1(T);
  const p2 = calcPlan2(T, 15);

  const header = lines.length
    ? lines.join("\n") + "\n\n"
    : lang === "ru"
    ? t.ru.not_found
    : t.uz.not_found;
  const body = buildPlansText(lang, T, p1, p2);

  const buttons: any[] = [
    [Markup.button.callback(lang === "ru" ? t.ru.lang_btn : t.uz.lang_btn, "choose_lang")],
  ];
  if (T > 0) {
    // –ø–æ—Ä—è–¥–æ–∫: 1) –ø—Ä—è–º–∞—è, 2) —Å–∫–∏–¥–∫–∞, 3) –æ–¥–∏–Ω –∏–Ω–≤–æ–π—Å
    buttons.unshift([
      Markup.button.callback(lang === "ru" ? t.ru.pay_one_btn : t.uz.pay_one_btn, "pay_one"),
    ]);
    if (p2.allowed)
      buttons.unshift([Markup.button.callback(lang === "ru" ? t.ru.plan2_btn : t.uz.plan2_btn, "pay_plan2")]);
    buttons.unshift([Markup.button.callback(lang === "ru" ? t.ru.plan1_btn : t.uz.plan1_btn, "pay_plan1")]);
  }

  await ctx.reply(header + body, {
    parse_mode: "Markdown",
    reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
  });
}

/* ================== bot ================== */
export function createBot(token: string) {
  const bot = new Telegraf(token);

  bot.catch(async (err, ctx) => {
    console.error("Telegraf error:", err);
    const lang = ses(ctx.chat!.id).lang;
    await ctx.reply(lang === "ru" ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ /start." : "Xatolik yuz berdi. Yana /start yuboring.");
  });

  bot.command("restart", async (ctx) => {
    sessions.delete(ctx.chat!.id);
    await ctx.reply(`${t.ru.choose_lang_title}\n${t.ru.choose_lang_sub}\n\n`, kbLang);
  });

  bot.command("lang", async (ctx) => {
    await ctx.reply(`${t.ru.choose_lang_title}\n${t.ru.choose_lang_sub}\n\n`, kbLang);
  });
  bot.action("choose_lang", async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    await ctx.reply(`${t.ru.choose_lang_title}\n${t.ru.choose_lang_sub}\n\n`, kbLang);
  });

  bot.start(async (ctx) => {
    const s = ses(ctx.chat!.id);
    s.step = "lang";
    await ctx.reply(`${t.ru.choose_lang_title}\n${t.ru.choose_lang_sub}\n\n`, kbLang);
  });

  bot.action("lang_ru", async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    const s = ses(ctx.chat!.id);
    s.lang = "ru"; s.step = "idle";
    await ctx.reply(t.ru.start_prompt, kbStart("ru"));
  });
  bot.action("lang_uz", async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    const s = ses(ctx.chat!.id);
    s.lang = "uz"; s.step = "idle";
    await ctx.reply(t.uz.start_prompt, kbStart("uz"));
  });

  bot.action("help", async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    const s = ses(ctx.chat!.id);
    const name = ctx.from?.first_name || "";
    const text = s.lang === "ru"
      ? `–ü—Ä–∏–≤–µ—Ç, ${name}!\n\n‚òéÔ∏è +1 305 744 1538\nüîπ @easypayusasupport\n‚úâÔ∏è example@easypayusasupport.com\n\n–ù–∞–∂–º–∏ ¬´–û–ø–ª–∞—Ç–∏—Ç—å E-ZPass¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.`
      : `Salom, ${name}!\n\n‚òéÔ∏è +1 305 744 1538\nüîπ @easypayusasupport\n‚úâÔ∏è example@easypayusasupport.com\n\nBoshlash uchun ¬´E-ZPass to‚Äòlash¬ª tugmasini bosing.`;
    await ctx.reply(text, kbStart(s.lang));
  });

  // –∏—Å—Ç–æ—Ä–∏—è
  const num = (x: any) => Number(x ?? 0);
  const histItem = (lang: Lang, r: any) => {
    const header = lang === "ru"
      ? `–ü–ª–∞–Ω: ${r.plan_label === "plan1_direct" ? "–ü—Ä—è–º–∞—è" : "–°–æ —Å–∫–∏–¥–∫–æ–π"}`
      : `Reja: ${r.plan_label === "plan1_direct" ? "To‚Äòg‚Äòridan-to‚Äòg‚Äòri" : "Chegirma bilan"}`;
    const status =
      r.status === "pending" ? (lang === "ru" ? "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã ‚ôªÔ∏è" : "To‚Äòlov kutilmoqda ‚ôªÔ∏è")
      : r.status === "completed" ? (lang === "ru" ? "–û–ø–ª–∞—á–µ–Ω–æ ‚úÖ" : "To‚Äòlangan ‚úÖ")
      : (lang === "ru" ? "–°–æ–∑–¥–∞—ë—Ç—Å—è ‚ôªÔ∏è" : "Yaratilmoqda ‚ôªÔ∏è");
    return [
      `#${String(r.id).slice(0, 8)} ‚Äî ${header}`,
      `Plate: ${r.plate} | Invoice: ${r.invoice}`,
      `–°—Ç–∞—Ç—É—Å: ${status}`,
      `–°—É–º–º–∞: $${num(r.total_usd).toFixed(2)}`,
    ].join("\n");
  };

  bot.action("history", async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    const s = ses(ctx.chat!.id);
    const rows = await listByChat(String(ctx.chat!.id), 15);
    if (!rows.length) return ctx.reply(s.lang === "ru" ? t.ru.hist_none : t.uz.hist_none, kbStart(s.lang));
    const text = rows.map((r) => histItem(s.lang, r)).join("\n\n");
    await ctx.reply(text, kbStart(s.lang));
  });

  // —Å—Ç–∞—Ä—Ç –≤–≤–æ–¥–∞
  bot.action("start_flow", async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    const s = ses(ctx.chat!.id);
    s.step = "await_plate";
    s.plate = s.invoice = s.ezpassAccount = undefined;
    s.lastTotal = undefined;
    s.items = [];
    s.singleIndex = null;
    s.scope = "total";
    await ctx.reply(s.lang === "ru" ? t.ru.ask_plate : t.uz.ask_plate, { parse_mode: "Markdown" });
  });

  // –≤–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –ø–ª–∞–Ω–æ–≤ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
  bot.action("back_menu", async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    await sendPlansMenu(ctx);
  });

  // –≤–≤–æ–¥—ã
  bot.on("text", async (ctx) => {
    const S = ses(ctx.chat!.id);
    const lang = S.lang;
    const msg = (ctx.message.text || "").trim();

    if (S.step === "await_plate") {
      if (!/^[A-Z0-9\-]{2,10}$/i.test(msg))
        return ctx.reply(lang === "ru" ? t.ru.plate_invalid : t.uz.plate_invalid, { parse_mode: "Markdown" });
      S.plate = msg.toUpperCase();
      S.step = "await_invoice";
      return ctx.reply(lang === "ru" ? t.ru.ask_invoice : t.uz.ask_invoice, { parse_mode: "Markdown" });
    }

    if (S.step === "await_invoice") {
      if (!/^[A-Z0-9\-]{6,20}$/i.test(msg))
        return ctx.reply(lang === "ru" ? t.ru.invoice_invalid : t.uz.invoice_invalid, { parse_mode: "Markdown" });
      S.invoice = msg.toUpperCase();
      S.step = "idle";

      // —Ä–∞–Ω–Ω—è—è –∞–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ (–ø–æ –æ–±—â–µ–º—É total)
      try {
        const plateNorm = (S.plate || "").trim().toUpperCase();
        const invoiceNorm = (S.invoice || "").trim().toUpperCase();
        if (plateNorm && invoiceNorm) {
          const ex: any = await findDuplicateAnyPlan(ctx.chat!.id, plateNorm, invoiceNorm);
          if (ex && ["creating", "pending", "completed"].includes(ex.status)) {
            const exPlan: PlanLabel = (ex.plan_label as PlanLabel) ?? (ex.plan as PlanLabel) ?? "plan1_direct";
            const title =
              lang === "ru"
                ? ex.status === "completed"
                  ? "–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞ ‚úÖ"
                  : "–ó–∞—è–≤–∫–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ —ç—Ç–∏–º –¥–∞–Ω–Ω—ã–º ‚úÖ"
                : ex.status === "completed"
                ? "Ushbu ma‚Äôlumotlar bo‚Äòyicha to‚Äòlov allaqachon bajarilgan ‚úÖ"
                : "Ushbu ma‚Äôlumotlar bo‚Äòyicha ariza allaqachon yaratilgan ‚úÖ";

            const hint =
              lang === "ru"
                ? ex.status === "completed"
                  ? "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å ‚Äî –∏–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä—É–≥–æ–π –∏–Ω–≤–æ–π—Å) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                  : ""
                : ex.status === "completed"
                ? "Qayta to‚Äòlash uchun ma‚Äôlumotlarni o‚Äòzgartiring (masalan, boshqa invoice) yoki yordamga yozing."
                : "";

            const lines = [
              `${title}\n`,
              `Plate: *${ex.plate}*  |  Invoice: *${ex.invoice}*`,
              `Plan: *${planTitle(lang, exPlan)}*`,
              `Summa: *$${Number(ex.total_usd || 0).toFixed(2)}*`,
              `\n${hint}`,
            ].join("\n");

            if (ex.status !== "completed" && ex.pay_url) {
              await ctx.reply(lines, {
                parse_mode: "Markdown",
                reply_markup: Markup.inlineKeyboard([
                  [Markup.button.url(lang === "ru" ? "–û–ø–ª–∞—Ç–∏—Ç—å (Stripe)" : "To‚Äòlash (Stripe)", ex.pay_url)],
                ]).reply_markup,
              });
            } else {
              await ctx.reply(lines, { parse_mode: "Markdown" });
            }
            return;
          }
        }
      } catch (e) {
        console.error("early-dup-check error:", (e as any)?.message);
      }

      await ctx.reply(lang === "ru" ? t.ru.checking : t.uz.checking);

      // –ø—Ä–æ–≤–µ—Ä–∫–∞ NJ
      let res: any = null;
      try {
        res = await checkEzpassNJ({ invoiceNumber: S.invoice!, plate: S.plate! });
      } catch (e) {
        console.error("checkEzpassNJ error:", e);
        return ctx.reply(
          lang === "ru"
            ? "–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            : "Tekshiruv xizmati vaqtincha mavjud emas. Birozdan so‚Äòng urinib ko‚Äòring yoki yordamga yozing.",
          kbStart(lang)
        );
      }

      S.lastTotal = +(res?.total || 0).toFixed(2);
      S.items = (res?.items || []) as NjItem[];
      S.singleIndex = null;
      S.scope = "total";

      return sendPlansMenu(ctx);
    }

    if (S.step === "await_ezpass_account") {
      const cleaned = msg.replace(/[^\d]/g, "");
      if (!/^\d{11}$/.test(cleaned))
        return ctx.reply(lang === "ru" ? t.ru.ezpass_acc_invalid : t.uz.ezpass_acc_invalid, { parse_mode: "Markdown" });
      S.ezpassAccount = cleaned;
      S.step = "idle";

      // === —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞—É—Ç–∞ P2 (total | single)
      if (S.scope === "single" && S.items && S.singleIndex != null) {
        const item = S.items[S.singleIndex];
        const T = +(item?.amountDue || 0).toFixed(2);
        const p2 = calcPlan2(T, 15);

        const { created, row } = await insertCreatingOrGetExisting({
          chatId: ctx.chat!.id,
          plan: "plan2_discount",
          plate: S.plate || "",
          invoice: item?.noticeNumber || S.invoice || "",
          ezpassAccount: S.ezpassAccount,
          totalUsd: T,
        });

        if (!created) {
          if (row.status !== "completed" && row.pay_url) {
            const txt =
              (lang === "ru" ? t.ru.dup_pending_title : t.uz.dup_pending_title) +
              `\n\nPlate: *${row.plate}*  |  Invoice: *${row.invoice}*` +
              `\nPlan: *${planTitle(lang, "plan2_discount")}*  |  –°—É–º–º–∞: *$${Number(row.total_usd || 0).toFixed(2)}*\n\n` +
              (lang === "ru" ? t.ru.dup_pending_hint : t.uz.dup_pending_hint);
            return ctx.reply(txt, {
              parse_mode: "Markdown",
              reply_markup: Markup.inlineKeyboard([
                [Markup.button.url(lang === "ru" ? "–û–ø–ª–∞—Ç–∏—Ç—å (Stripe)" : "To‚Äòlash (Stripe)", row.pay_url)],
              ]).reply_markup,
            });
          }
          if (row.status === "completed") {
            const txt =
              (lang === "ru" ? t.ru.dup_done_title : t.uz.dup_done_title) +
              `\n\nPlate: *${row.plate}*  |  Invoice: *${row.invoice}*` +
              `\nPlan: *${planTitle(lang, "plan2_discount")}*\n\n` +
              (lang === "ru" ? t.ru.dup_done_hint : t.uz.dup_done_hint);
            return ctx.reply(txt, { parse_mode: "Markdown" });
          }
          const txt =
            (lang === "ru" ? t.ru.dup_creating_title : t.uz.dup_creating_title) +
            `\n\n` +
            (lang === "ru" ? t.ru.dup_creating_hint : t.uz.dup_creating_hint);
          return ctx.reply(txt, { parse_mode: "Markdown" });
        }

        const { id, url } = await createTotalCheckout(
          {
            totalUsd: p2.total,
            planLabel: "plan2_discount",
            tollUsd: p2.discounted,
            serviceUsd: p2.service,
            feesUsd: p2.fees,
            chatId: ctx.chat!.id,
            username: ctx.from?.username,
            firstName: ctx.from?.first_name,
            plate: S.plate || "",
            invoice: item?.noticeNumber || S.invoice || "",
            ezpassState: "New Jersey",
            ezpassAccount: S.ezpassAccount || "",
          },
          {
            idempotencyKey: `G:${ctx.chat!.id}:p2:one:${(S.plate || "").toUpperCase()}:${(item?.noticeNumber || S.invoice || "").toUpperCase()}`,
          }
        );

        await setPending(row.id, id, url, p2.total);

        return ctx.reply((lang === "ru" ? t.ru.pay_now : t.uz.pay_now)(p2.total), {
          parse_mode: "Markdown",
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.url(lang === "ru" ? "–û–ø–ª–∞—Ç–∏—Ç—å (Stripe)" : "To‚Äòlash (Stripe)", url)],
          ]).reply_markup,
        });
      } else {
        // === —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π P2 (total)
        const T = +(S.lastTotal || 0).toFixed(2);
        const p2 = calcPlan2(T, 15);

        const { created, row } = await insertCreatingOrGetExisting({
          chatId: ctx.chat!.id,
          plan: "plan2_discount",
          plate: S.plate || "",
          invoice: S.invoice || "",
          ezpassAccount: S.ezpassAccount,
          totalUsd: S.lastTotal || 0,
        });

        if (!created) {
          if (row.status !== "completed" && row.pay_url) {
            const txt =
              (lang === "ru" ? t.ru.dup_pending_title : t.uz.dup_pending_title) +
              `\n\nPlate: *${row.plate}*  |  Invoice: *${row.invoice}*` +
              `\nPlan: *${planTitle(lang, "plan2_discount")}*  |  –°—É–º–º–∞: *$${Number(row.total_usd || 0).toFixed(2)}*\n\n` +
              (lang === "ru" ? t.ru.dup_pending_hint : t.uz.dup_pending_hint);
            return ctx.reply(txt, {
              parse_mode: "Markdown",
              reply_markup: Markup.inlineKeyboard([
                [Markup.button.url(lang === "ru" ? "–û–ø–ª–∞—Ç–∏—Ç—å (Stripe)" : "To‚Äòlash (Stripe)", row.pay_url)],
              ]).reply_markup,
            });
          }
          if (row.status === "completed") {
            const txt =
              (lang === "ru" ? t.ru.dup_done_title : t.uz.dup_done_title) +
              `\n\nPlate: *${row.plate}*  |  Invoice: *${row.invoice}*` +
              `\nPlan: *${planTitle(lang, "plan2_discount")}*\n\n` +
              (lang === "ru" ? t.ru.dup_done_hint : t.uz.dup_done_hint);
            return ctx.reply(txt, { parse_mode: "Markdown" });
          }
          const txt =
            (lang === "ru" ? t.ru.dup_creating_title : t.uz.dup_creating_title) +
            `\n\n` +
            (lang === "ru" ? t.ru.dup_creating_hint : t.uz.dup_creating_hint);
          return ctx.reply(txt, { parse_mode: "Markdown" });
        }

        const { id, url } = await createTotalCheckout(
          {
            totalUsd: p2.total,
            planLabel: "plan2_discount",
            tollUsd: p2.discounted,
            serviceUsd: p2.service,
            feesUsd: p2.fees,
            chatId: ctx.chat!.id,
            username: ctx.from?.username,
            firstName: ctx.from?.first_name,
            plate: S.plate || "",
            invoice: S.invoice || "",
            ezpassState: "New Jersey",
            ezpassAccount: S.ezpassAccount || "",
          },
          {
            idempotencyKey: `G:${ctx.chat!.id}:p2:${(S.plate || "").toUpperCase()}:${(S.invoice || "").toUpperCase()}`,
          }
        );

        await setPending(row.id, id, url, p2.total);

        return ctx.reply((lang === "ru" ? t.ru.pay_now : t.uz.pay_now)(p2.total), {
          parse_mode: "Markdown",
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.url(lang === "ru" ? "–û–ø–ª–∞—Ç–∏—Ç—å (Stripe)" : "To‚Äòlash (Stripe)", url)],
          ]).reply_markup,
        });
      }
    }

    return ctx.reply(S.lang === "ru" ? t.ru.start_hint : t.uz.start_hint, kbStart(S.lang));
  });

  /* ====== –ü–õ–ê–¢–Å–ñ –ó–ê –û–î–ò–ù –ò–ù–í–û–ô–°: —Å–ø–∏—Å–æ–∫ ====== */
  bot.action("pay_one", async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    const S = ses(ctx.chat!.id);
    const lang = S.lang;
    if (!S.items?.length) {
      return ctx.reply(lang === "ru" ? "–°–ø–∏—Å–æ–∫ –∏–Ω–≤–æ–π—Å–æ–≤ –ø—É—Å—Ç." : "Invoyslar ro‚Äòyxati bo‚Äòsh.");
    }

    // –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ, —Å—É–º–º–∞ —Å–ª–µ–≤–∞ ‚Äî —á—Ç–æ–±—ã –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö –≤—Å–µ–≥–¥–∞ –±—ã–ª–∞ –≤–∏–¥–Ω–∞
    const rows: any[] = [];
    S.items.forEach((it, idx) => rows.push([Markup.button.callback(invBtnLabel(it), `one_${idx}`)]));
    rows.push([Markup.button.callback(lang === "ru" ? t.ru.back_btn : t.uz.back_btn, "back_menu")]);

    await ctx.reply(lang === "ru" ? t.ru.choose_one_title : t.uz.choose_one_title, {
      reply_markup: Markup.inlineKeyboard(rows).reply_markup,
    });
  });

  /* ====== –≤—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ ‚Üí –≤—ã–±–æ—Ä –ø–ª–∞–Ω–∞ ====== */
  bot.action(/^one_(\d+)$/, async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    const S = ses(ctx.chat!.id);
    const lang = S.lang;

    const data = (ctx.callbackQuery as any)?.data ?? "";
    const m = /^one_(\d+)$/.exec(data);
    const idx = m ? Number(m[1]) : -1;

    if (!Array.isArray(S.items) || idx < 0 || idx >= S.items.length) {
      return ctx.reply(
        lang === "ru"
          ? "–°–ø–∏—Å–æ–∫ –∏–Ω–≤–æ–π—Å–æ–≤ —É—Å—Ç–∞—Ä–µ–ª. –ù–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å –æ–¥–∏–Ω –∏–Ω–≤–æ–π—Å¬ª –µ—â—ë —Ä–∞–∑."
          : "Invoyslar ro‚Äòyxati eskirgan. ¬´Bitta invoysni to‚Äòlash¬ª tugmasini bosib qaytaring."
      );
    }
    S.singleIndex = idx;
    S.scope = "single";

    const item = S.items[idx];
    const p2 = calcPlan2(+item.amountDue.toFixed(2), 15);

    const buttons: any[] = [];
    buttons.push([Markup.button.callback(lang === "ru" ? t.ru.pay_one_p1_btn : t.uz.pay_one_p1_btn, `one_p1_${idx}`)]);
    if (p2.allowed) {
      buttons.push([Markup.button.callback(lang === "ru" ? t.ru.pay_one_p2_btn : t.uz.pay_one_p2_btn, `one_p2_${idx}`)]);
    } else {
      buttons.push([
        Markup.button.callback(
          lang === "ru" ? `${t.ru.pay_one_p2_btn} (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ < $70)` : `${t.uz.pay_one_p2_btn} (>$70)`,
          "noop"
        ),
      ]);
    }
    buttons.push([Markup.button.callback(lang === "ru" ? t.ru.back_btn : t.uz.back_btn, "pay_one")]);

    const title =
      lang === "ru"
        ? `–í—ã–±—Ä–∞–Ω –∏–Ω–≤–æ–π—Å: *${item.noticeNumber || "‚Äî"}* –Ω–∞ —Å—É–º–º—É *${money(item.amountDue)}*`
        : `Tanlangan invoys: *${item.noticeNumber || "‚Äî"}* ‚Äî *${money(item.amountDue)}*`;

    await ctx.reply(title, { parse_mode: "Markdown", reply_markup: Markup.inlineKeyboard(buttons).reply_markup });
  });

  bot.action("noop", async (ctx) => { await ctx.answerCbQuery().catch(() => {}); });

  /* ====== –æ–ø–ª–∞—Ç–∞ –æ–¥–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ ‚Äî –ø—Ä—è–º–∞—è ====== */
  bot.action(/^one_p1_(\d+)$/, async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    const S = ses(ctx.chat!.id);
    const lang = S.lang;

    const data = (ctx.callbackQuery as any)?.data ?? "";
    const m = /^one_p1_(\d+)$/.exec(data);
    const idx = m ? Number(m[1]) : -1;

    if (!Array.isArray(S.items) || idx < 0 || idx >= S.items.length) {
      return ctx.reply(lang === "ru" ? "–°–ø–∏—Å–æ–∫ –∏–Ω–≤–æ–π—Å–æ–≤ —É—Å—Ç–∞—Ä–µ–ª. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞." : "Ro‚Äòyxat eskirgan. Qayta oching.");
    }
    const item = S.items[idx];
    const T = +(item.amountDue || 0).toFixed(2);
    if (T <= 0) return ctx.reply(lang === "ru" ? t.ru.no_charges : t.uz.no_charges);

    const { created, row } = await insertCreatingOrGetExisting({
      chatId: ctx.chat!.id,
      plan: "plan1_direct",
      plate: S.plate || "",
      invoice: item.noticeNumber || S.invoice || "",
      totalUsd: T,
    });

    if (!created) {
      if (row.status !== "completed" && row.pay_url) {
        const txt =
          (lang === "ru" ? t.ru.dup_pending_title : t.uz.dup_pending_title) +
          `\n\nPlate: *${row.plate}*  |  Invoice: *${row.invoice}*` +
          `\nPlan: *${planTitle(lang, "plan1_direct")}*  |  –°—É–º–º–∞: *$${Number(row.total_usd || 0).toFixed(2)}*\n\n` +
          (lang === "ru" ? t.ru.dup_pending_hint : t.uz.dup_pending_hint);
        return ctx.reply(txt, {
          parse_mode: "Markdown",
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.url(lang === "ru" ? "–û–ø–ª–∞—Ç–∏—Ç—å (Stripe)" : "To‚Äòlash (Stripe)", row.pay_url)],
          ]).reply_markup,
        });
      }
      if (row.status === "completed") {
        const txt =
          (lang === "ru" ? t.ru.dup_done_title : t.uz.dup_done_title) +
          `\n\nPlate: *${row.plate}*  |  Invoice: *${row.invoice}*` +
          `\nPlan: *${planTitle(lang, "plan1_direct")}*\n\n` +
          (lang === "ru" ? t.ru.dup_done_hint : t.uz.dup_done_hint);
        return ctx.reply(txt, { parse_mode: "Markdown" });
      }
      const txt = (lang === "ru" ? t.ru.dup_creating_title : t.uz.dup_creating_title) + `\n\n` +
                  (lang === "ru" ? t.ru.dup_creating_hint : t.uz.dup_creating_hint);
      return ctx.reply(txt, { parse_mode: "Markdown" });
    }

    const p1 = calcPlan1(T);
    const { id, url } = await createTotalCheckout(
      {
        totalUsd: p1.total,
        planLabel: "plan1_direct",
        tollUsd: T,
        serviceUsd: p1.service,
        feesUsd: p1.fees,
        chatId: ctx.chat!.id,
        username: ctx.from?.username,
        firstName: ctx.from?.first_name,
        plate: S.plate || "",
        invoice: item.noticeNumber || S.invoice || "",
        ezpassState: "New Jersey",
        ezpassAccount: "",
      },
      { idempotencyKey: `G:${ctx.chat!.id}:p1:one:${(S.plate || "").toUpperCase()}:${(item.noticeNumber || S.invoice || "").toUpperCase()}` }
    );

    await setPending(row.id, id, url, p1.total);

    await ctx.reply((lang === "ru" ? t.ru.pay_now : t.uz.pay_now)(p1.total), {
      parse_mode: "Markdown",
      reply_markup: Markup.inlineKeyboard([[Markup.button.url(lang === "ru" ? "–û–ø–ª–∞—Ç–∏—Ç—å (Stripe)" : "To‚Äòlash (Stripe)", url)]]).reply_markup,
    });
  });

  /* ====== –æ–ø–ª–∞—Ç–∞ –æ–¥–Ω–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ ‚Äî —Å–æ —Å–∫–∏–¥–∫–æ–π (–∑–∞–ø—Ä–æ—Å –∞–∫–∫–∞—É–Ω—Ç–∞) ====== */
  bot.action(/^one_p2_(\d+)$/, async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    const S = ses(ctx.chat!.id);
    const lang = S.lang;

    const data = (ctx.callbackQuery as any)?.data ?? "";
    the_idx:
    {};
    const m = /^one_p2_(\d+)$/.exec(data);
    const idx = m ? Number(m[1]) : -1;

    if (!Array.isArray(S.items) || idx < 0 || idx >= S.items.length) {
      return ctx.reply(lang === "ru" ? "–°–ø–∏—Å–æ–∫ –∏–Ω–≤–æ–π—Å–æ–≤ —É—Å—Ç–∞—Ä–µ–ª. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞." : "Ro‚Äòyxat eskirgan. Qayta oching.");
    }
    const item = S.items[idx];
    const T = +(item.amountDue || 0).toFixed(2);
    const p2 = calcPlan2(T, 15);
    if (!p2.allowed) return ctx.reply(lang === "ru" ? t.ru.p2_min70 : t.uz.p2_min70);

    const ex = await findDuplicateAnyPlan(ctx.chat!.id, (S.plate || "").toUpperCase(), (item.noticeNumber || S.invoice || "").toUpperCase());
    if (ex) {
      if (ex.status !== "completed" && ex.pay_url) {
        const txt =
          (lang === "ru" ? t.ru.dup_pending_title : t.uz.dup_pending_title) +
          `\n\nPlate: *${ex.plate}*  |  Invoice: *${ex.invoice}*` +
          `\nPlan: *${planTitle(lang, "plan2_discount")}*  |  –°—É–º–º–∞: *$${Number(ex.total_usd || 0).toFixed(2)}*\n\n` +
          (lang === "ru" ? t.ru.dup_pending_hint : t.uz.dup_pending_hint);
        return ctx.reply(txt, {
          parse_mode: "Markdown",
          reply_markup: Markup.inlineKeyboard([[Markup.button.url(lang === "ru" ? "–û–ø–ª–∞—Ç–∏—Ç—å (Stripe)" : "To‚Äòlash (Stripe)", ex.pay_url!)]]).reply_markup,
        });
      }
      const txt = (lang === "ru" ? t.ru.dup_creating_title : t.uz.dup_creating_title) + `\n\n` +
                  (lang === "ru" ? t.ru.dup_creating_hint : t.uz.dup_creating_hint);
      return ctx.reply(txt, { parse_mode: "Markdown" });
    }

    S.scope = "single";
    S.singleIndex = idx;
    S.ezpassAccount = undefined;
    S.step = "await_ezpass_account";
    await ctx.reply(lang === "ru" ? t.ru.ask_ezpass_acc : t.uz.ask_ezpass_acc, { parse_mode: "Markdown" });
  });

  /* ====== –ø–ª–∞–Ω 2 (total) ====== */
  bot.action("pay_plan2", async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    const S = ses(ctx.chat!.id);
    const T = +(S.lastTotal || 0).toFixed(2);
    const p2 = calcPlan2(T, 15);
    if (!p2.allowed) return ctx.reply(S.lang === "ru" ? t.ru.p2_min70 : t.uz.p2_min70);

    const ex = await findDuplicateAnyPlan(ctx.chat!.id, (S.plate || "").toUpperCase(), (S.invoice || "").toUpperCase());
    if (ex) {
      if (ex.status !== "completed" && ex.pay_url) {
        const txt =
          (S.lang === "ru" ? t.ru.dup_pending_title : t.uz.dup_pending_title) +
          `\n\nPlate: *${ex.plate}*  |  Invoice: *${ex.invoice}*` +
          `\nPlan: *${planTitle(S.lang, "plan2_discount")}*  |  –°—É–º–º–∞: *$${Number(ex.total_usd || 0).toFixed(2)}*\n\n` +
          (S.lang === "ru" ? t.ru.dup_pending_hint : t.uz.dup_pending_hint);
        return ctx.reply(txt, {
          parse_mode: "Markdown",
          reply_markup: Markup.inlineKeyboard([[Markup.button.url(S.lang === "ru" ? "–û–ø–ª–∞—Ç–∏—Ç—å (Stripe)" : "To‚Äòlash (Stripe)", ex.pay_url!)]]).reply_markup,
        });
      }
      const txt = (S.lang === "ru" ? t.ru.dup_creating_title : t.uz.dup_creating_title) + `\n\n` +
                  (S.lang === "ru" ? t.ru.dup_creating_hint : t.uz.dup_creating_hint);
      return ctx.reply(txt, { parse_mode: "Markdown" });
    }

    S.scope = "total";
    S.ezpassAccount = undefined;
    S.step = "await_ezpass_account";
    await ctx.reply(S.lang === "ru" ? t.ru.ask_ezpass_acc : t.uz.ask_ezpass_acc, { parse_mode: "Markdown" });
  });

  /* ====== –ø–ª–∞–Ω 1 (total) ====== */
  bot.action("pay_plan1", async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    const S = ses(ctx.chat!.id);
    const T = +(S.lastTotal || 0).toFixed(2);
    if (T <= 0) return ctx.reply(S.lang === "ru" ? t.ru.no_charges : t.uz.no_charges);

    const { created, row } = await insertCreatingOrGetExisting({
      chatId: ctx.chat!.id,
      plan: "plan1_direct",
      plate: S.plate || "",
      invoice: S.invoice || "",
      totalUsd: T,
    });

    if (!created) {
      if (row.status !== "completed" && row.pay_url) {
        const txt =
          (S.lang === "ru" ? t.ru.dup_pending_title : t.uz.dup_pending_title) +
          `\n\nPlate: *${row.plate}*  |  Invoice: *${row.invoice}*` +
          `\nPlan: *${planTitle(S.lang, "plan1_direct")}*  |  –°—É–º–º–∞: *$${Number(row.total_usd || 0).toFixed(2)}*\n\n` +
          (S.lang === "ru" ? t.ru.dup_pending_hint : t.uz.dup_pending_hint);
        return ctx.reply(txt, {
          parse_mode: "Markdown",
          reply_markup: Markup.inlineKeyboard([[Markup.button.url(S.lang === "ru" ? "–û–ø–ª–∞—Ç–∏—Ç—å (Stripe)" : "To‚Äòlash (Stripe)", row.pay_url)]]).reply_markup,
        });
      }
      if (row.status === "completed") {
        const txt =
          (S.lang === "ru" ? t.ru.dup_done_title : t.uz.dup_done_title) +
          `\n\nPlate: *${row.plate}*  |  Invoice: *${row.invoice}*` +
          `\nPlan: *${planTitle(S.lang, "plan1_direct")}*\n\n` +
          (S.lang === "ru" ? t.ru.dup_done_hint : t.uz.dup_done_hint);
        return ctx.reply(txt, { parse_mode: "Markdown" });
      }
      const txt = (S.lang === "ru" ? t.ru.dup_creating_title : t.uz.dup_creating_title) + `\n\n` +
                  (S.lang === "ru" ? t.ru.dup_creating_hint : t.uz.dup_creating_hint);
      return ctx.reply(txt, { parse_mode: "Markdown" });
    }

    const p1 = calcPlan1(T);
    const { id, url } = await createTotalCheckout(
      {
        totalUsd: p1.total,
        planLabel: "plan1_direct",
        tollUsd: T,
        serviceUsd: p1.service,
        feesUsd: p1.fees,
        chatId: ctx.chat!.id,
        username: ctx.from?.username,
        firstName: ctx.from?.first_name,
        plate: S.plate || "",
        invoice: S.invoice || "",
        ezpassState: "New Jersey",
        ezpassAccount: "",
      },
      { idempotencyKey: `G:${ctx.chat!.id}:p1:${(S.plate || "").toUpperCase()}:${(S.invoice || "").toUpperCase()}` }
    );

    await setPending(row.id, id, url, p1.total);

    await ctx.reply((S.lang === "ru" ? t.ru.pay_now : t.uz.pay_now)(p1.total), {
      parse_mode: "Markdown",
      reply_markup: Markup.inlineKeyboard([[Markup.button.url(S.lang === "ru" ? "–û–ø–ª–∞—Ç–∏—Ç—å (Stripe)" : "To‚Äòlash (Stripe)", url)]]).reply_markup,
    });
  });

  return bot;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã –ë–î –ø—Ä–∏ –∏–º–ø–æ—Ä—Çe –±–æ—Ç–∞
ensureSchema().catch((e) => {
  console.error("DB init error:", e);
});
