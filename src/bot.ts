// src/bot.ts
import { Telegraf, Markup } from "telegraf";
import { checkEzpassNJ } from "./providers/ezpassnj";
import { calcPlan1, calcPlan2, createTotalCheckout } from "./payments";
import {
  ensureSchema,
  insertCreatingOrGetExisting,
  setPending,
  listByChat,
  findActive,
  PlanLabel,
} from "./db";

/* ================== i18n ================== */
type Lang = "ru" | "uz";

const t = {
  ru: {
    choose_lang_title: "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!",
    choose_lang_sub: "Botdan foydalanish uchun tilni tanlang!",
    start_prompt:
      "–í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ ‚Äî –ø—Ä–æ–≤–µ—Ä—é –≤—Å–µ –∏–Ω–≤–æ–π—Å—ã –∏ –≤—ã–≤–µ–¥—É –∏—Ç–æ–≥.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
    ask_plate: "–í–≤–µ–¥–∏ *Plate number* (–∫–∞–∫ –Ω–∞ –Ω–æ–º–µ—Ä–µ –∞–≤—Ç–æ):",
    ask_invoice:
      "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ *Invoice/Violation number* (—Å –ø–∏—Å—å–º–∞):",
    plate_invalid:
      "–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ Plate. –ü—Ä–∏–º–µ—Ä: *RLRYY99* –∏–ª–∏ *ABC-1234*.",
    invoice_invalid:
      "–ù–æ–º–µ—Ä –∏–Ω–≤–æ–π—Å–∞/–Ω–∞—Ä—É—à–µ–Ω–∏—è –≤—ã–≥–ª—è–¥–∏—Ç —Å—Ç—Ä–∞–Ω–Ω–æ. –ü—Ä–∏–º–µ—Ä: *T062549136462*.",
    checking: "–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ –±–∞–∑–µ NJ E-ZPass‚Ä¶ ‚è≥",
    not_found: "–ù–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n",
    found_items_title: "–ù–∞–π–¥–µ–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:",
    start_hint: "–ù–∞–∂–º–∏ ¬´–û–ø–ª–∞—Ç–∏—Ç—å E-ZPass¬ª, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ.",
    start_main: "–û–ø–ª–∞—Ç–∏—Ç—å E-ZPass",
    help: "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
    history: "–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫",
    hist_none: "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.",
    plan1_btn: "1) –ü—Ä—è–º–∞—è –æ–ø–ª–∞—Ç–∞",
    plan2_btn: "2) –°–æ —Å–∫–∏–¥–∫–æ–π",
    ask_ezpass_acc:
      "–í–≤–µ–¥–∏—Ç–µ *E-ZPass account number* (–Ω–∞–ø—Ä–∏–º–µ—Ä, *99999999*). –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π.",
    ezpass_acc_invalid:
      "–ù–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ E-ZPass –≤—ã–≥–ª—è–¥–∏—Ç —Å—Ç—Ä–∞–Ω–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –æ—Ç *6* –¥–æ *12* —Ü–∏—Ñ—Ä. –ü—Ä–∏–º–µ—Ä: *99999999*.",

    dup_creating_title: "–ó–∞—è–≤–∫–∞ –ø–æ —ç—Ç–∏–º –¥–∞–Ω–Ω—ã–º —É–∂–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è‚Ä¶ ‚è≥",
    dup_creating_hint:
      "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤—É—é.",
    dup_pending_title: "–ó–∞—è–≤–∫–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ —ç—Ç–∏–º –¥–∞–Ω–Ω—ã–º ‚úÖ",
    dup_pending_hint:
      "–ï—Å–ª–∏ –≤—ã –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø–ª–∞—Ç—ë–∂:",
    dup_done_title: "–ó–∞—è–≤–∫–∞ –ø–æ —ç—Ç–∏–º –¥–∞–Ω–Ω—ã–º —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞ ‚úÖ",
    dup_done_hint:
      "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å ‚Äî –∏–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä—É–≥–æ–π –∏–Ω–≤–æ–π—Å) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
    lang_btn: "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
  },
  uz: {
    choose_lang_title: "Tilni tanlang va davom eting!",
    choose_lang_sub: "Botdan foydalanish uchun tilni tanlang!",
    start_prompt:
      "Ma‚Äôlumotlarni yuboring ‚Äî hisoblarni tekshiraman va umumiy summani chiqaraman.\nQuyidagi tugmani bosing üëá",
    ask_plate: "*Plate number* (avto raqami) ni kiriting:",
    ask_invoice:
      "Endi xatdagi *Invoice/Violation number* ni kiriting:",
    plate_invalid:
      "Plate noto‚Äòg‚Äòri ko‚Äòrinadi. Namuna: *RLRYY99* yoki *ABC-1234*.",
    invoice_invalid:
      "Invoice/Violation raqami noto‚Äòg‚Äòri. Namuna: *T062549136462*.",
    checking: "NJ E-ZPass bazasida tekshiryapman‚Ä¶ ‚è≥",
    not_found: "Hisoblar topilmadi.\n\n",
    found_items_title: "Topilgan hisoblar:",
    start_hint:
      "Ma‚Äôlumot kiritish uchun ¬´E-ZPass to‚Äòlash¬ª tugmasini bosing.",
    start_main: "E-ZPass to‚Äòlash",
    help: "Yordam",
    history: "Buyurtmalar tarixi",
    hist_none: "Hali buyurtmalar yo‚Äòq.",
    plan1_btn: "1) To‚Äòg‚Äòridan-to‚Äòg‚Äòri to‚Äòlov",
    plan2_btn: "2) Chegirma bilan",
    ask_ezpass_acc:
      "*E-ZPass account number* ni kiriting (masalan, *99999999*). Chegirma varianti uchun majburiy.",
    ezpass_acc_invalid:
      "E-ZPass hisob raqami noto‚Äòg‚Äòri. Iltimos, *6‚Äì12* raqam kiriting. Masalan: *99999999*.",

    dup_creating_title:
      "Ushbu ma‚Äôlumotlar bo‚Äòyicha ariza yaratilmoqda‚Ä¶ ‚è≥",
    dup_creating_hint:
      "Bir necha soniya kuting. Agar havola allaqachon bo‚Äòlsa ‚Äî yangisini yaratmasdan undan foydalaning.",
    dup_pending_title:
      "Ushbu ma‚Äôlumotlar bo‚Äòyicha ariza allaqachon yaratilgan ‚úÖ",
    dup_pending_hint:
      "Hali to‚Äòlovni yakunlamagan bo‚Äòlsangiz, quyidagi havola orqali davom eting:",
    dup_done_title:
      "Ushbu ma‚Äôlumotlar bo‚Äòyicha to‚Äòlov allaqachon bajarilgan ‚úÖ",
    dup_done_hint:
      "Qayta to‚Äòlash uchun ma‚Äôlumotlarni o‚Äòzgartiring (masalan, boshqa invoice) yoki yordamga yozing.",
    lang_btn: "üåê Tilni almashtirish",
  },
};

type Step =
  | "lang"
  | "idle"
  | "await_plate"
  | "await_invoice"
  | "await_ezpass_account";

type Session = {
  step: Step;
  plate?: string;
  invoice?: string;
  ezpassAccount?: string;
  lastTotal?: number;
  lang: Lang;
};
const sessions = new Map<number, Session>();
const ses = (id: number): Session => {
  if (!sessions.has(id)) sessions.set(id, { step: "lang", lang: "ru" });
  return sessions.get(id)!;
};

const kbLang = Markup.inlineKeyboard([
  [
    Markup.button.callback("–†—É—Å—Å–∫–∏–π üá∑üá∫", "lang_ru"),
    Markup.button.callback("O‚Äòzbekcha üá∫üáø", "lang_uz"),
  ],
]);

const kbStart = (lang: Lang) =>
  Markup.inlineKeyboard([
    [Markup.button.callback(lang === "ru" ? t.ru.start_main : t.uz.start_main, "start_flow")],
    [Markup.button.callback(lang === "ru" ? t.ru.history : t.uz.history, "history")],
    [Markup.button.callback(lang === "ru" ? t.ru.help : t.uz.help, "help")],
    [Markup.button.callback(lang === "ru" ? t.ru.lang_btn : t.uz.lang_btn, "choose_lang")],
  ]);

function buildPlansText(
  lang: Lang,
  T: number,
  p1: { service: number; fees: number; total: number },
  p2: {
    allowed: boolean;
    discounted: number;
    service: number;
    serviceReduced?: boolean;
    fees: number;
    total: number;
  }
) {
  if (T <= 0) {
    return lang === "ru"
      ? "–ü–æ –±–∞–∑–µ –Ω–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π ‚Äî –ø–ª–∞—Ç–∏—Ç—å –Ω–µ—á–µ–≥–æ."
      : "Bazaga ko‚Äòra hech qanday to‚Äòlov yo‚Äòq ‚Äî to‚Äòlash shart emas.";
  }

  if (lang === "uz") {
    let s = "";
    s += `Bazadagi jami: *$${T.toFixed(2)}*\n\n`;
    s += `Bizda 2 xil xizmat mavjud.\n\n`;
    s += `*1-variant ‚Äî chegirmasiz, to‚Äòg‚Äòridan-to‚Äòg‚Äòri to‚Äòlov!*\n`;
    s += `Toll to‚Äòlovi ‚Äî *$${T.toFixed(2)}*\n`;
    s += `Xizmat haqi ‚Äî *$${p1.service.toFixed(2)}*\n`;
    s += `Boshqa xarajatlar ‚Äî *$${p1.fees.toFixed(2)}*\n`;
    s += `Jami ‚Äî *$${p1.total.toFixed(2)}*\n\n`;
    s += `‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è *MUHIM:* 1-variantda bajarilish muddati *6 ish soatigacha*. ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n\n`;

    if (p2.allowed) {
      s += `*2-variant ‚Äî minimal 10% chegirma beriladi.* (Chegirma kattaroq bo‚Äòlishi mumkin; farq kartangizga qaytariladi.)\n`;
      s += `Toll to‚Äòlovi ‚Äî *$${p2.discounted.toFixed(2)}*\n`;
      s += `Xizmat haqi ‚Äî *$${p2.service.toFixed(2)}*${p2.serviceReduced ? " _(minusga chiqib ketmasligingiz uchun kamaytirildi)_" : ""}\n`;
      s += `Boshqa xarajatlar ‚Äî *$${p2.fees.toFixed(2)}*\n`;
      s += `Jami ‚Äî *$${p2.total.toFixed(2)}* (summa yanada kam bo‚Äòlishi mumkin ‚ò∫Ô∏è)\n\n`;
      s += `‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è *MUHIM:* 2-variantda bajarilish muddati *2 ish kunigacha*. ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n\n`;
    } else {
      s += `*2-variant* hozircha mavjud emas: tanlash uchun minimal summa ‚Äî *$70*.\n\n`;
    }
    s += `Quyida xizmatni tanlang üëáüèª`;
    return s;
  }

  let s = "";
  s += `–ò—Ç–æ–≥–æ –ø–æ –±–∞–∑–µ –Ω–∞–π–¥–µ–Ω–æ: *$${T.toFixed(2)}*\n\n`;
  s += `–£ –Ω–∞—Å –∏–º–µ—é—Ç—Å—è 2 –≤–∏–¥–∞ —É—Å–ª—É–≥.\n\n`;
  s += `*1-–π –≤–∏–¥ - –±–µ–∑ —Å–∫–∏–¥–æ–∫, –æ–ø–ª–∞—Ç–∞ –Ω–∞ –ø—Ä—è–º—É—é!*\n`;
  s += `–ü–ª–∞—Ç–∞ –∑–∞ —Ç–æ–ª–ª - *$${T.toFixed(2)}*\n`;
  s += `–ü–ª–∞—Ç–∞ –∑–∞ —Å–µ—Ä–≤–∏—Å - *$${p1.service.toFixed(2)}*\n`;
  s += `–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã - *$${p1.fees.toFixed(2)}*\n`;
  s += `–¢–æ—Ç–∞–ª - *$${p1.total.toFixed(2)}*\n\n`;
  s += `‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –í–ê–ñ–ù–û –ü–†–ò –í–´–ë–û–†–ï 1-–ì–û –í–ê–†–ò–ê–ù–¢–ê –°–†–û–ö –î–û–°–¢–ê–í–ö–ò –î–û *6 –†–ê–ë–û–ß–ò–• –ß–ê–°–û–í* ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n\n`;

  if (p2.allowed) {
    s += `*2-–æ–π –≤–∏–¥ - –≤—ã–¥–∞–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ 10%.* (—Å–∫–∏–¥–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ, –æ—Å—Ç–∞—Ç–æ–∫ –º—ã –≤–µ—Ä–Ω—ë–º –Ω–∞ –≤–∞—à—É –∫–∞—Ä—Ç—É.)\n`;
    s += `–ü–ª–∞—Ç–∞ –∑–∞ —Ç–æ–ª–ª - *$${p2.discounted.toFixed(2)}*\n`;
    s += `–ü–ª–∞—Ç–∞ –∑–∞ —Å–µ—Ä–≤–∏—Å - *$${p2.service.toFixed(2)}*${p2.serviceReduced ? " _(—Å–Ω–∏–∂–µ–Ω–æ, —á—Ç–æ–±—ã –≤—ã –Ω–µ —É—à–ª–∏ –≤ –º–∏–Ω—É—Å)_" : ""}\n`;
    s += `–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã - *$${p2.fees.toFixed(2)}*\n`;
    s += `–¢–æ—Ç–∞–ª - *$${p2.total.toFixed(2)}* (—Å—É–º–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ ‚ò∫Ô∏è)\n\n`;
    s += `‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –í–ê–ñ–ù–û –ü–†–ò –í–´–ë–û–†–ï 2-–ì–û –í–ê–†–ò–ê–ù–¢–ê –°–†–û–ö –î–û–°–¢–ê–í–ö–ò –î–û *2-–• –†–ê–ë–û–ß–ò–• –î–ù–ï–ô* ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n\n`;
  } else {
    s += `*2-–æ–π –≤–∏–¥* –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø—É–Ω–∫—Ç–∞ ‚Äî *$70*.\n\n`;
  }
  s += `–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –Ω–∏–∂–µ üëáüèª`;
  return s;
}

/* ================== bot ================== */
export function createBot(token: string) {
  const bot = new Telegraf(token);

  // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –æ–±—â–∏–π catcher, —á—Ç–æ–±—ã ¬´–Ω–µ –≤–∏—Å–ª–æ¬ª
  bot.catch(async (err, ctx) => {
    console.error("Telegraf error:", err);
    const lang = ses(ctx.chat!.id).lang;
    await ctx.reply(
      lang === "ru"
        ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ /start."
        : "Xatolik yuz berdi. Yana /start yuboring."
    );
  });

  // /lang ‚Äî —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
  bot.command("lang", async (ctx) => {
    await ctx.reply(
      `${t.ru.choose_lang_title}\n${t.ru.choose_lang_sub}\n\n${t.uz.choose_lang_title}\n${t.uz.choose_lang_sub}`,
      kbLang
    );
  });
  bot.action("choose_lang", async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    await ctx.reply(
      `${t.ru.choose_lang_title}\n${t.ru.choose_lang_sub}\n\n${t.uz.choose_lang_title}\n${t.uz.choose_lang_sub}`,
      kbLang
    );
  });

  // /start
  bot.start(async (ctx) => {
    const s = ses(ctx.chat!.id);
    s.step = "lang";
    await ctx.reply(
      `${t.ru.choose_lang_title}\n${t.ru.choose_lang_sub}\n\n${t.uz.choose_lang_title}\n${t.uz.choose_lang_sub}`,
      kbLang
    );
  });

  // –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ (–≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  bot.action("lang_ru", async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    const s = ses(ctx.chat!.id);
    s.lang = "ru";
    s.step = "idle";
    await ctx.reply(t.ru.start_prompt, kbStart("ru"));
  });
  bot.action("lang_uz", async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    const s = ses(ctx.chat!.id);
    s.lang = "uz";
    s.step = "idle";
    await ctx.reply(t.uz.start_prompt, kbStart("uz"));
  });

  // —Å–ø—Ä–∞–≤–∫–∞
  bot.action("help", async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    const s = ses(ctx.chat!.id);
    const name = ctx.from?.first_name || "";
    const text =
      s.lang === "ru"
        ? `–ü—Ä–∏–≤–µ—Ç, ${name}!\n\n‚òéÔ∏è +1 999 999 99 99\nüîπ @easypayusasupport\n‚úâÔ∏è example@easypayusasupport.com\n\n–ù–∞–∂–º–∏ ¬´–û–ø–ª–∞—Ç–∏—Ç—å E-ZPass¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.`
        : `Salom, ${name}!\n\n‚òéÔ∏è +1 999 999 99 99\nüîπ @easypayusasupport\n‚úâÔ∏è example@easypayusasupport.com\n\nBoshlash uchun ¬´E-ZPass to‚Äòlash¬ª tugmasini bosing.`;
    await ctx.reply(text, kbStart(s.lang));
  });

  // –∏—Å—Ç–æ—Ä–∏—è
  const n = (x: any) => Number(x ?? 0);
  const histItem = (lang: Lang, r: any) => {
    const header =
      lang === "ru"
        ? `–ü–ª–∞–Ω: ${r.plan_label === "plan1_direct" ? "–ü—Ä—è–º–∞—è" : "–°–æ —Å–∫–∏–¥–∫–æ–π"}`
        : `Reja: ${r.plan_label === "plan1_direct" ? "To‚Äòg‚Äòridan-to‚Äòg‚Äòri" : "Chegirma bilan"}`;
    const status =
      r.status === "pending"
        ? (lang === "ru" ? "–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã" : "to‚Äòlov kutilmoqda")
        : r.status === "completed"
        ? (lang === "ru" ? "–æ–ø–ª–∞—á–µ–Ω–æ" : "to‚Äòlangan")
        : (lang === "ru" ? "—Å–æ–∑–¥–∞—ë—Ç—Å—è" : "yaratilmoqda");
    return [
      `#${r.id.slice(0, 8)} ‚Äî ${header}`,
      `Plate: ${r.plate} | Invoice: ${r.invoice}`,
      `–°—Ç–∞—Ç—É—Å: ${status}`,
      `–°—É–º–º–∞: $${n(r.total_usd).toFixed(2)}`
    ].join("\n");
  };

  bot.action("history", async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    const s = ses(ctx.chat!.id);
    const rows = await listByChat(String(ctx.chat!.id), 15);
    if (!rows.length) {
      return ctx.reply(s.lang === "ru" ? t.ru.hist_none : t.uz.hist_none, kbStart(s.lang));
    }
    const text = rows.map((r) => histItem(s.lang, r)).join("\n\n");
    await ctx.reply(text, kbStart(s.lang));
  });

  // –Ω–∞—á–∞—Ç—å –≤–≤–æ–¥
  bot.action("start_flow", async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    const s = ses(ctx.chat!.id);
    s.step = "await_plate";
    s.plate = s.invoice = s.ezpassAccount = undefined;
    s.lastTotal = undefined;
    await ctx.reply(s.lang === "ru" ? t.ru.ask_plate : t.uz.ask_plate, { parse_mode: "Markdown" });
  });

  // –≤–≤–æ–¥—ã
  bot.on("text", async (ctx) => {
    const S = ses(ctx.chat!.id);
    const lang = S.lang;
    const msg = (ctx.message.text || "").trim();

    if (S.step === "await_plate") {
      if (!/^[A-Z0-9\-]{2,10}$/i.test(msg)) {
        return ctx.reply(lang === "ru" ? t.ru.plate_invalid : t.uz.plate_invalid, { parse_mode: "Markdown" });
      }
      S.plate = msg.toUpperCase();
      S.step = "await_invoice";
      return ctx.reply(lang === "ru" ? t.ru.ask_invoice : t.uz.ask_invoice, { parse_mode: "Markdown" });
    }

    if (S.step === "await_invoice") {
      if (!/^[A-Z0-9\-]{6,20}$/i.test(msg)) {
        return ctx.reply(lang === "ru" ? t.ru.invoice_invalid : t.uz.invoice_invalid, { parse_mode: "Markdown" });
      }
      S.invoice = msg.toUpperCase();
      S.step = "idle";

      await ctx.reply(lang === "ru" ? t.ru.checking : t.uz.checking);

      // –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ NJ
      const res = await checkEzpassNJ({ invoiceNumber: S.invoice!, plate: S.plate! });

      const lines: string[] = [];
      if (res.items?.length) {
        lines.push(lang === "ru" ? t.ru.found_items_title : t.uz.found_items_title);
        for (const it of res.items) {
          const n = it.noticeNumber ? `#${it.noticeNumber}` : "‚Äî";
          lines.push(`‚Ä¢ ${n} ‚Äî $${it.amountDue.toFixed(2)}`);
        }
      }

      const T = +(res.total || 0).toFixed(2);
      S.lastTotal = T;

      const p1 = calcPlan1(T);
      const p2 = calcPlan2(T, 15);

      const header = lines.length ? lines.join("\n") + "\n\n" : (lang === "ru" ? t.ru.not_found : t.uz.not_found);
      const body = buildPlansText(lang, T, p1, p2);

      // –µ—Å–ª–∏ T==0 ‚Äî —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ –æ–ø–ª–∞—Ç—ã)
      const buttons: any[] = [[Markup.button.callback(lang === "ru" ? t.ru.lang_btn : t.uz.lang_btn, "choose_lang")]];
      if (T > 0) {
        buttons.unshift([Markup.button.callback(lang === "ru" ? t.ru.plan1_btn : t.uz.plan1_btn, "pay_plan1")]);
        if (p2.allowed) buttons.unshift([Markup.button.callback(lang === "ru" ? t.ru.plan2_btn : t.uz.plan2_btn, "pay_plan2")]);
      }

      return ctx.reply(header + body, {
        parse_mode: "Markdown",
        reply_markup: Markup.inlineKeyboard(buttons).reply_markup,
      });
    }

    if (S.step === "await_ezpass_account") {
      const cleaned = msg.replace(/[^\d]/g, "");
      if (!/^\d{6,12}$/.test(cleaned)) {
        return ctx.reply(lang === "ru" ? t.ru.ezpass_acc_invalid : t.uz.ezpass_acc_invalid, { parse_mode: "Markdown" });
      }
      S.ezpassAccount = cleaned;
      S.step = "idle";

      // –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º —á–µ–∫–∞—É—Ç–∞ ‚Äî –ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å creating, –∞ –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å, —Ç–æ –≤–µ—Ä–Ω—ë–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
      const { created, row } = await insertCreatingOrGetExisting({
        chatId: ctx.chat!.id,
        plan: "plan2_discount",
        plate: S.plate || "",
        invoice: S.invoice || "",
        ezpassAccount: S.ezpassAccount,
        totalUsd: S.lastTotal || 0,
      });

      if (!created) {
        if (row.status !== "completed" && row.pay_url) {
          const txt =
            (lang === "ru" ? t.ru.dup_pending_title : t.uz.dup_pending_title) +
            `\n\nPlate: *${row.plate}*  |  Invoice: *${row.invoice}*\nPlan: *2 (—Å–æ —Å–∫–∏–¥–∫–æ–π)*  |  –°—É–º–º–∞: *$${Number(row.total_usd || 0).toFixed(2)}*\n\n` +
            (lang === "ru" ? t.ru.dup_pending_hint : t.uz.dup_pending_hint);
          return ctx.reply(txt, {
            parse_mode: "Markdown",
            reply_markup: Markup.inlineKeyboard([[Markup.button.url("–û–ø–ª–∞—Ç–∏—Ç—å (Stripe)", row.pay_url)]]).reply_markup,
          });
        }
        if (row.status === "completed") {
          const txt =
            (lang === "ru" ? t.ru.dup_done_title : t.uz.dup_done_title) +
            `\n\nPlate: *${row.plate}*  |  Invoice: *${row.invoice}*\nPlan: *2 (—Å–æ —Å–∫–∏–¥–∫–æ–π)*\n\n` +
            (lang === "ru" ? t.ru.dup_done_hint : t.uz.dup_done_hint);
          return ctx.reply(txt, { parse_mode: "Markdown" });
        }
        // creating ‚Äî –º—è–≥–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const txt =
          (lang === "ru" ? t.ru.dup_creating_title : t.uz.dup_creating_title) +
          `\n\n` +
          (lang === "ru" ? t.ru.dup_creating_hint : t.uz.dup_creating_hint);
        return ctx.reply(txt, { parse_mode: "Markdown" });
      }

      // —Å–æ–∑–¥–∞—ë–º checkout
      const T = +(S.lastTotal || 0).toFixed(2);
      const p2 = calcPlan2(T, 15);

      const { id, url } = await createTotalCheckout(
        {
          totalUsd: p2.total,
          planLabel: "plan2_discount",
          tollUsd: p2.discounted,
          serviceUsd: p2.service,
          feesUsd: p2.fees,
          chatId: ctx.chat!.id,
          username: ctx.from?.username,
          firstName: ctx.from?.first_name,
          plate: S.plate || "",
          invoice: S.invoice || "",
          ezpassState: "New Jersey",
          ezpassAccount: S.ezpassAccount || "",
          // –≤–∞–∂–Ω–æ: –≤ metadata –≤–Ω—É—Ç—Ä–∏ payments –¥–æ–±–∞–≤—å –ø—Ä–æ–±—Ä–æ—Å reqId (row.id)
          // –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π session.id –≤ –≤–µ–±—Ö—É–∫–µ ‚Äî –º—ã —É–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –ø—É—Ç–∏
          // –∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        },
        { idempotencyKey: `G:${ctx.chat!.id}:p2:${(S.plate || "").toUpperCase()}:${(S.invoice || "").toUpperCase()}` }
      );

      await setPending(row.id, id, url, p2.total);

      return ctx.reply(`–û—Ç–∫—Ä–æ–π—Ç–µ Stripe –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ *$${p2.total.toFixed(2)}*`, {
        parse_mode: "Markdown",
        reply_markup: Markup.inlineKeyboard([[Markup.button.url("–û–ø–ª–∞—Ç–∏—Ç—å (Stripe)", url)]]).reply_markup,
      });
    }

    return ctx.reply(S.lang === "ru" ? t.ru.start_hint : t.uz.start_hint, kbStart(S.lang));
  });

  // –ø–ª–∞–Ω 2: –∑–∞–ø—Ä–æ—Å –∞–∫–∫–∞—É–Ω—Ç–∞
  bot.action("pay_plan2", async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    const S = ses(ctx.chat!.id);
    const T = +(S.lastTotal || 0).toFixed(2);
    const p2 = calcPlan2(T, 15);
    if (!p2.allowed) {
      return ctx.reply(S.lang === "ru" ? "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ‚Äî $70." : "Ikkinchi variant uchun minimal summa ‚Äî $70.");
    }

    // –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏
    const ex = await findActive(String(ctx.chat!.id), "plan2_discount", S.plate || "", S.invoice || "");
    if (ex) {
      if (ex.status !== "completed" && ex.pay_url) {
        const txt =
          (S.lang === "ru" ? t.ru.dup_pending_title : t.uz.dup_pending_title) +
          `\n\nPlate: *${ex.plate}*  |  Invoice: *${ex.invoice}*\nPlan: *2 (—Å–æ —Å–∫–∏–¥–∫–æ–π)*  |  –°—É–º–º–∞: *$${Number(ex.total_usd || 0).toFixed(2)}*\n\n` +
          (S.lang === "ru" ? t.ru.dup_pending_hint : t.uz.dup_pending_hint);
        return ctx.reply(txt, {
          parse_mode: "Markdown",
          reply_markup: Markup.inlineKeyboard([[Markup.button.url("–û–ø–ª–∞—Ç–∏—Ç—å (Stripe)", ex.pay_url)]]).reply_markup,
        });
      }
      const txt =
        (S.lang === "ru" ? t.ru.dup_creating_title : t.uz.dup_creating_title) +
        `\n\n` +
        (S.lang === "ru" ? t.ru.dup_creating_hint : t.uz.dup_creating_hint);
      return ctx.reply(txt, { parse_mode: "Markdown" });
    }

    S.step = "await_ezpass_account";
    S.ezpassAccount = undefined;
    await ctx.reply(S.lang === "ru" ? t.ru.ask_ezpass_acc : t.uz.ask_ezpass_acc, { parse_mode: "Markdown" });
  });

  // –ø–ª–∞–Ω 1: –ø—Ä—è–º–∞—è
  bot.action("pay_plan1", async (ctx) => {
    await ctx.answerCbQuery().catch(() => {});
    const S = ses(ctx.chat!.id);
    const T = +(S.lastTotal || 0).toFixed(2);
    if (T <= 0) {
      return ctx.reply(S.lang === "ru" ? "–ü–æ –±–∞–∑–µ –Ω–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π." : "Bazaga ko‚Äòra to‚Äòlov yo‚Äòq.");
    }

    // –¥—É–±–ª–∏–∫–∞—Ç—ã?
    const { created, row } = await insertCreatingOrGetExisting({
      chatId: ctx.chat!.id,
      plan: "plan1_direct",
      plate: S.plate || "",
      invoice: S.invoice || "",
      totalUsd: T,
    });

    if (!created) {
      if (row.status !== "completed" && row.pay_url) {
        const txt =
          (S.lang === "ru" ? t.ru.dup_pending_title : t.uz.dup_pending_title) +
          `\n\nPlate: *${row.plate}*  |  Invoice: *${row.invoice}*\nPlan: *1 (–ø—Ä—è–º–∞—è)*  |  –°—É–º–º–∞: *$${Number(row.total_usd || 0).toFixed(2)}*\n\n` +
          (S.lang === "ru" ? t.ru.dup_pending_hint : t.uz.dup_pending_hint);
        return ctx.reply(txt, {
          parse_mode: "Markdown",
          reply_markup: Markup.inlineKeyboard([[Markup.button.url("–û–ø–ª–∞—Ç–∏—Ç—å (Stripe)", row.pay_url)]]).reply_markup,
        });
      }
      if (row.status === "completed") {
        const txt =
          (S.lang === "ru" ? t.ru.dup_done_title : t.uz.dup_done_title) +
          `\n\nPlate: *${row.plate}*  |  Invoice: *${row.invoice}*\nPlan: *1 (–ø—Ä—è–º–∞—è)*\n\n` +
          (S.lang === "ru" ? t.ru.dup_done_hint : t.uz.dup_done_hint);
        return ctx.reply(txt, { parse_mode: "Markdown" });
      }
      const txt =
        (S.lang === "ru" ? t.ru.dup_creating_title : t.uz.dup_creating_title) +
        `\n\n` +
        (S.lang === "ru" ? t.ru.dup_creating_hint : t.uz.dup_creating_hint);
      return ctx.reply(txt, { parse_mode: "Markdown" });
    }

    // —Å–æ–∑–¥–∞—ë–º checkout
    const p1 = calcPlan1(T);
    const { id, url } = await createTotalCheckout(
      {
        totalUsd: p1.total,
        planLabel: "plan1_direct",
        tollUsd: T,
        serviceUsd: p1.service,
        feesUsd: p1.fees,
        chatId: ctx.chat!.id,
        username: ctx.from?.username,
        firstName: ctx.from?.first_name,
        plate: S.plate || "",
        invoice: S.invoice || "",
        ezpassState: "New Jersey",
        ezpassAccount: "",
      },
      { idempotencyKey: `G:${ctx.chat!.id}:p1:${(S.plate || "").toUpperCase()}:${(S.invoice || "").toUpperCase()}` }
    );

    await setPending(row.id, id, url, p1.total);

    await ctx.reply(`–û—Ç–∫—Ä–æ–π—Ç–µ Stripe –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ *$${p1.total.toFixed(2)}*`, {
      parse_mode: "Markdown",
      reply_markup: Markup.inlineKeyboard([[Markup.button.url("–û–ø–ª–∞—Ç–∏—Ç—å (Stripe)", url)]]).reply_markup,
    });
  });

  return bot;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã –ë–î –ø—Ä–∏ –∏–º–ø–æ—Ä—Çe –±–æ—Ç–∞
ensureSchema().catch((e) => {
  console.error("DB init error:", e);
});
